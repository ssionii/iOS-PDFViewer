//
//  MagazineListViewController.swift
//  PdfSample
//
//  Created by 60058232 on 2021/01/26.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MagazineListDisplayLogic: class
{
	func displayMagazines(viewModel: MagazineList.FetchMagazines.ViewModel)
}

class MagazineListViewController: UIViewController, MagazineListDisplayLogic, UICollectionViewDelegate, UICollectionViewDataSource
{

	var interactor: MagazineListBusinessLogic?
	var router: (NSObjectProtocol & MagazineListRoutingLogic & MagazineListDataPassing)?

	// MARK: Object lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
	{
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder)
	{
		super.init(coder: aDecoder)
		setup()
	}

	// MARK: Setup

	private func setup()
	{
		let viewController = self
		let interactor = MagazineListInteractor()
		let presenter = MagazineListPresenter()
		let router = MagazineListRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}

	// MARK: Routing

	override func prepare(for segue: UIStoryboardSegue, sender: Any?)
	{
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}

	// MARK: - View lifecycle

	override func viewDidLoad()
	{
		super.viewDidLoad()
		fetchIssues()

		self.magazineCollectionView.delegate = self
		self.magazineCollectionView.dataSource = self
	}

	// MARK: Fetch magazines

	var magazineList = [MagazineList.FetchMagazines.ViewModel.DisplayedMagazine](){
		didSet {
			self.magazineCollectionView.reloadData()
		}
	}

	func fetchIssues()
	{
		let request = MagazineList.FetchMagazines.Request()
		interactor?.fetchMagazines(request: request)
	}

	func displayMagazines(viewModel: MagazineList.FetchMagazines.ViewModel) {
		magazineList = viewModel.displayedMagazine
	}

	// MARK: - collection view

	@IBOutlet weak var magazineCollectionView: UICollectionView!


	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return magazineList.count
	}

	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

		let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "MegazineCollectionViewCell", for: indexPath) as! MagazineCollectionViewCell

		cell.bindData(thumbnail: magazineList[indexPath.row].thumbnail, title: magazineList[indexPath.row].title)

		return cell
	}
}
